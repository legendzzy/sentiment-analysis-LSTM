# -*- coding: utf-8 -*-
"""sentiment_rnn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HTLrhOc9XhpUHYaPKBJ5ZOwgj2Fv7i6q
"""
import spacy
from torchtext.legacy import data
import torch
import dill
import os
import random
import time
import torch.optim as optim
import torch.nn as nn
#define tokenizer
spacy_en = spacy.load('en_core_web_sm')
def tokenizer(text):
    return [tok.text for tok in spacy_en.tokenizer(text)]

SEED=7676
torch.manual_seed(SEED)
torch.backends.cudnn.deterministic = True

TEXT = data.Field(sequential=True, lower=True, tokenize=tokenizer,include_lengths=True)#need to let the RNN knows how long is the sequence
# TEXT = data.Field(sequential=True, lower=True, tokenize=tokenizer,stop_words=stop_words,include_lengths=True)#need to let the RNN knows how long is the sequence
LABEL = data.Field(dtype=torch.float,sequential=False, use_vocab=False)

train_datafields = [('text', TEXT),('sentiment', LABEL)]
train_dataset = data.TabularDataset(
    path='./reviews_train_dataset.csv',
    format='csv',
    skip_header=True,
    fields=train_datafields,
)

# build vocabulary
TEXT.build_vocab(train_dataset, max_size=25000, vectors="glove.6B.100d",
                 unk_init=torch.Tensor.normal_)
LABEL.build_vocab(train_dataset)

text_vocab_path = './text_vocab'
label_vocab_path = './label_vocab'

if os.path.exists(text_vocab_path) and os.path.exists(label_vocab_path):
    print('load vocab...')
    with open(text_vocab_path, 'rb')as f:
        TEXT.vocab = dill.load(f)
    with open(label_vocab_path, 'rb')as f:
        LABEL.vocab = dill.load(f)
else:
    print('no local vocab, create a new vocab...')
    # TEXT.build_vocab(self.train, self.dev, self.test, vectors=GloVe(name='840B', dim=300))
    # LABEL.build_vocab(self.train)
    TEXT.build_vocab(train_dataset, max_size=25000, vectors="glove.6B.100d",
                 unk_init=torch.Tensor.normal_)
    LABEL.build_vocab(train_dataset)
    with open(text_vocab_path, 'wb')as f:
        dill.dump(TEXT.vocab, f)
        with open(label_vocab_path, 'wb')as f:
            dill.dump(LABEL.vocab, f)

#devide train_set into train set and test set
# split ratio is 3:1

train_data, test_data = train_dataset.split(random_state = random.seed(SEED))

#define dataset iterator
BATCH_SIZE = 64

device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

train_iterator, test_iterator = data.BucketIterator.splits(
    (train_data, test_data),
    batch_size=BATCH_SIZE,
    sort_key=lambda x: len(x.text),
    shuffle=True,
    sort_within_batch=True,
    sort=False,
    device=device,
)

"""# **DEFINE RNN(LSTM) MODEL**"""
class RNN(nn.Module):
    def __init__(self, vocab_size, embedding_dim, hidden_dim, output_dim, n_layers, 
                 bidirectional, dropout, pad_idx):
        
        super().__init__()
        
        self.embedding = nn.Embedding(vocab_size, embedding_dim, padding_idx = pad_idx)
        self.rnn = nn.LSTM(embedding_dim, 
                           hidden_dim, 
                           num_layers=n_layers, 
                           bidirectional=bidirectional, 
                           dropout=dropout)
        self.fc = nn.Linear(hidden_dim * 2, output_dim)
        self.dropout = nn.Dropout(dropout)
        
    def forward(self, text, text_lengths):
        
        #text = [sent len, batch size]
        
        embedded = self.dropout(self.embedding(text))
        
        #embedded = [sent len, batch size, emb dim]
        
        #pack sequence
        packed_embedded = nn.utils.rnn.pack_padded_sequence(embedded, text_lengths)
        packed_output, (hidden, cell) = self.rnn(packed_embedded)
        
        #unpack sequence
        output, output_lengths = nn.utils.rnn.pad_packed_sequence(packed_output)

        #output = [sent len, batch size, hid dim * num directions]
        #output over padding tokens are zero tensors
        
        #hidden = [num layers * num directions, batch size, hid dim]
        #cell = [num layers * num directions, batch size, hid dim]
        
        #concat the final forward (hidden[-2,:,:]) and backward (hidden[-1,:,:]) hidden layers
        #and apply dropout
        
        hidden = self.dropout(torch.cat((hidden[-2,:,:], hidden[-1,:,:]), dim = 1))
                
        #hidden = [batch size, hid dim * num directions]
        x = self.fc(hidden)
        # x = x / torch.norm(x)
        return x

INPUT_DIM = len(TEXT.vocab)
EMBEDDING_DIM = 100
HIDDEN_DIM = 256
OUTPUT_DIM = 1
N_LAYERS = 2
BIDIRECTIONAL = True
DROPOUT = 0.5
PAD_IDX = TEXT.vocab.stoi[TEXT.pad_token]

model = RNN(INPUT_DIM, 
            EMBEDDING_DIM, 
            HIDDEN_DIM, 
            OUTPUT_DIM, 
            N_LAYERS, 
            BIDIRECTIONAL, 
            DROPOUT, 
            PAD_IDX)

pretrained_embeddings = TEXT.vocab.vectors
print(pretrained_embeddings.shape)

#replace the original weight by pretrained embeddings
model.embedding.weight.data.copy_(pretrained_embeddings)

#define function: calculate the accuracy
def binary_accuracy(preds, y):
    #round predictions to the closest integer
    rounded_preds = torch.round(torch.sigmoid(preds))
    correct = (rounded_preds == y).float() #convert into float for division 
    acc = correct.sum() / len(correct)
    return acc


def epoch_time(start_time, end_time):
    elapsed_time = end_time - start_time
    elapsed_mins = int(elapsed_time / 60)
    elapsed_secs = int(elapsed_time - (elapsed_mins * 60))
    return elapsed_mins, elapsed_secs


optimizer = optim.Adam(model.parameters())
criterion = nn.BCEWithLogitsLoss()
model = model.to(device)
criterion = criterion.to(device)

# define train
def train(model, iterator, optimizer, criterion):
    
    epoch_loss = 0
    epoch_acc = 0
    
    # the model uses the dropout, therefore need to ensure the model is in train model
    model.train()
    
    for batch in iterator:
        optimizer.zero_grad()
        text, text_lengths = batch.text
        predictions = model(text, text_lengths.to("cpu")).squeeze(1)
        loss = criterion(predictions, batch.sentiment)
        acc = binary_accuracy(predictions, batch.sentiment)
        loss.backward()
        optimizer.step()
        epoch_loss += loss.item()
        epoch_acc += acc.item()
    return epoch_loss / len(iterator), epoch_acc / len(iterator)

#define test function
def evaluate(model, iterator, criterion):
    epoch_loss = 0
    epoch_acc = 0
    model.eval()
    with torch.no_grad():
        for batch in iterator:
            text, text_lengths = batch.text
            predictions = model(text, text_lengths.to("cpu")).squeeze(1)
            loss = criterion(predictions, batch.sentiment)
            acc = binary_accuracy(predictions, batch.sentiment)
            epoch_loss += loss.item()
            epoch_acc += acc.item()
        
    return epoch_loss / len(iterator), epoch_acc / len(iterator)

# start training
N_EPOCHS = 10

best_test_loss = float('inf')

for epoch in range(N_EPOCHS):
    start_time = time.time()
    train_loss, train_acc = train(model, train_iterator, optimizer, criterion)
    test_loss, test_acc = evaluate(model, test_iterator, criterion)
    end_time = time.time()
    epoch_mins, epoch_secs = epoch_time(start_time, end_time)
    if test_loss < best_test_loss:
        best_test_loss = test_loss
        torch.save(model.state_dict(), 'LSTM-model.pt')
    print(f'Epoch: {epoch+1:02} | Epoch Time: {epoch_mins}m {epoch_secs}s')
    print(f'\tTrain Loss: {train_loss:.3f} | Train Acc: {train_acc*100:.2f}%')
    print(f'\t Val. Loss: {test_loss:.3f} |  Val. Acc: {test_acc*100:.2f}%')

"""# **Make prediction**"""
nlp = spacy.load('en_core_web_sm')

def predict_sentiment(model, sentence):
    model.eval()
    tokenized = [tok.text for tok in nlp.tokenizer(sentence)]
    indexed = [TEXT.vocab.stoi[t] for t in tokenized]
    length = [len(indexed)]
    tensor = torch.LongTensor(indexed).to(device)
    tensor = tensor.unsqueeze(1)
    length_tensor = torch.LongTensor(length)
    prediction = torch.sigmoid(model(tensor, length_tensor))
    return prediction.item()

res = predict_sentiment(model, "the food is good. ")
print(res)